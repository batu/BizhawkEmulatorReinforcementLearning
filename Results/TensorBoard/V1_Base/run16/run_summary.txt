_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
flatten_11 (Flatten)         (None, 256)               0         
_________________________________________________________________
dense_21 (Dense)             (None, 32768)             8421376   
_________________________________________________________________
dense_22 (Dense)             (None, 4)                 131076    
=================================================================
Total params: 8,552,452
Trainable params: 8,552,452
Non-trainable params: 0
_________________________________________________________________

    window_length = 1

    model = Sequential()
    model.add(Flatten(input_shape=(window_length,) + env.observation_space.shape))
    model.add(Dense(2**k, activation='relu'))
    model.add(Dense(nb_actions, activation='linear'))

    memory = SequentialMemory(limit=50000, window_length=window_length)
    policy = BoltzmannQPolicy()

    dqn = DQNAgent(model=model, nb_actions=nb_actions, policy=policy, memory=memory,
           nb_steps_warmup=1024, gamma=.99, target_model_update=1,
           train_interval=1, delta_clip=1.)

    dqn.compile(Adam(lr=1e-3), metrics=['mae'])

    # try:
    dqn.fit(env, nb_steps=512 * 32, visualize=True, verbose=0, callbacks=[callbacks.TensorBoard(log_dir=tb_folder_path, write_graph=False)])
    # except OSError:
    #     print("OS ERROR OCCURED.")
    #     print("If this is not a emulator switch.")

		self.EPISODE_LENGTH = 512
		self.ACTION_LENGTH = 12

		# This is the action space.
		self.action_dict = {
			0: "A",
			1: "Right",
			2: "Left",
			3: "B",
			# 3: "Down",
			# 4: "B"
		}

		# This is the state
		return current_vector_with_memory_from_ss()

		def plusone_increase_minus_half_decrease_or_stationary():
			distance = self.get_distance()
			delta = distance - self.last_distance

			reward = -.5
			# The reward amounts
			if delta > 0:
				reward = 1
			elif delta < 0:
				reward = -.5

			self.last_distance = distance
			return reward

		# The reward is:
		reward = distance_traveled_between_frames()
