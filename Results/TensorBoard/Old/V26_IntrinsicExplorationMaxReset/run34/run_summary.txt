_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_25 (Dense)             (None, 5, 32)             8256      
_________________________________________________________________
flatten_5 (Flatten)          (None, 160)               0         
_________________________________________________________________
dense_26 (Dense)             (None, 32)                5152      
_________________________________________________________________
dense_27 (Dense)             (None, 14)                462       
_________________________________________________________________
dense_28 (Dense)             (None, 14)                210       
_________________________________________________________________
dense_29 (Dense)             (None, 4)                 60        
=================================================================
Total params: 14,140
Trainable params: 14,140
Non-trainable params: 0
_________________________________________________________________

for __ in range(8):
    for increase_confidence in range(5):
        window_length = 5
        memory_size = 2048
        batch_size = 256
        env = gym_bizhawk.BizHawk(logging_folder_path=TB_path, replay=REPLAY)

        model = Sequential()
        model.add(Dense(32, input_shape=((window_length,) + (257,)), activation="relu"))
        model.add(Flatten())
        model.add(Dense(32, activation="relu"))
        model.add(Dense(14, activation="relu"))
        model.add(Dense(14, activation="relu"))
        model.add(Dense(nb_actions, activation='linear'))

        episode_count = 16
        step_count = env.EPISODE_LENGTH * episode_count
        memory = SequentialMemory(limit=memory_size, window_length=window_length)
        policy = LinearAnnealedPolicy(EpsGreedyQPolicy(), attr='eps', value_max=.75, value_min=0.075, value_test=0,
                                     nb_steps=episode_count * 512 / 2)

        dqn = DQNAgent(model=model, nb_actions=nb_actions, policy=policy, memory=memory,
               nb_steps_warmup=512, gamma=.925, target_model_update=1e-2,
               train_interval=1, batch_size=batch_size, delta_clip=1., enable_dueling_network=True, dueling_type="avg")

        dqn.compile(Adam(lr=1e-3), metrics=['mae'])

        dqn.fit(env, nb_steps=step_count, visualize=True, verbose=0, callbacks=[callbacks.TensorBoard(log_dir=run_path, write_graph=True, write_images=True)])


		self.EPISODE_LENGTH = 768
		self.ACTION_LENGTH = 12

		# This is the action space.
		self.action_dict = {
			0: "A",
			1: "Right",
			2: "Left",
			3: "B",
			# 3: "Down",
			# 4: "B"
		}

		# This is the state
		return current_vector_with_memory_from_ss_plus_last_action()

		def plusone_increase_minus_half_decrease_or_stationary():
			distance = self.get_distance()
			delta = distance - self.last_distance

			reward = -.5
			# The reward amounts
			if delta > 0:
				reward = 1
			elif delta < 0:
				reward = -.5

			self.last_distance = distance
			return reward

		def distance_traveled_between_frames_minus_for_nochange():
			distance = self.get_distance()
			delta = distance - self.last_distance

			self.last_distance = distance
			if delta == 0:
				delta = -0.1
			if delta > 30:
				delta = 0
			if delta < -1250:
				delta = 0
			return delta

		# The reward is:
		reward = increase_the_max_bounding_box()
